{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "DiscordApi API definition",
    "description" : "- This is a simple Discord API like.\n- It uses Json web token as authentication way.\n- Once you created a user, you will be able to login.\n- Then use the returned Token in requests headers\n- JWT Authorization header using the Bearer scheme. \n- Example: \\\"Authorization: Bearer {token}\\\"\n",
    "contact" : {
      "email" : "rael.calitro@ynov.com"
    },
    "license" : {
      "name" : "MIT"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/rael06/restfull-api/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "http://localhost:5029",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "security" : [ {
    "Bearer" : [ ]
  } ],
  "tags" : [ {
    "name" : "trials",
    "description" : "Operations available to try the api"
  }, {
    "name" : "authentication",
    "description" : "Operations available for authentication"
  }, {
    "name" : "users",
    "description" : "Operations available to users"
  }, {
    "name" : "servers",
    "description" : "Operations available to servers"
  }, {
    "name" : "subscribers",
    "description" : "Operations available to subscribers"
  }, {
    "name" : "channels",
    "description" : "Operations available to channels"
  }, {
    "name" : "messages",
    "description" : "Operations available to messages"
  } ],
  "paths" : {
    "/trials/anonymous" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as anonymous",
        "operationId" : "tryApiAsAnonymous",
        "responses" : {
          "200" : {
            "description" : "Success:\n- DiscordApi is running, you are anonymous\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          }
        }
      }
    },
    "/trials/authenticated" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as authenticated",
        "operationId" : "tryApiAsAuthenticated",
        "responses" : {
          "200" : {
            "description" : "Success:\n- DiscordApi is running, you are authenticated\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          }
        }
      }
    },
    "/authentication/login" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Login a user and returns an access token as Json Web Token",
        "operationId" : "login",
        "requestBody" : {
          "description" : "A JSON object that contains the user name and password",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserLoginDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The access token\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessTokenDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          }
        }
      }
    },
    "/users" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a user and returns him",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "A JSON object that contains the user name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created:\n- The created user\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserReadDto"
                }
              }
            },
            "links" : {
              "GetUserById" : {
                "operationId" : "getUser",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `userId` parameter in `GET /users/{userId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "409" : {
            "description" : "Conflict:\n- User with provided userName already exists\n"
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Gets a user by id",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user you want to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The user\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Unauthorized:\n- User can only get his account\n"
          },
          "404" : {
            "description" : "Not found:\n- User not found\n"
          }
        }
      }
    },
    "/servers" : {
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets servers",
        "operationId" : "getServers",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The collection of servers\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerReadDto"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          }
        }
      },
      "post" : {
        "tags" : [ "servers" ],
        "summary" : "Creates a server and returns it",
        "operationId" : "createServer",
        "requestBody" : {
          "description" : "A JSON object that contains the server name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCreateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created:\n- The created server\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerReadDto"
                }
              }
            },
            "links" : {
              "GetServerById" : {
                "operationId" : "getServer",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `serverId` parameter in `GET /servers/{serverId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "409" : {
            "description" : "Conflict:\n- Server with provided name already exists\n"
          }
        }
      }
    },
    "/servers/{serverId}" : {
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Gets a server by id",
        "operationId" : "getServer",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server you want to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The server\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "404" : {
            "description" : "Not found:\n- Server not found\n"
          }
        }
      },
      "delete" : {
        "tags" : [ "servers" ],
        "summary" : "Deletes a server",
        "operationId" : "deleteServer",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server you want to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content: \n- Server deleted\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only delete servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Server not found\n"
          }
        }
      },
      "patch" : {
        "tags" : [ "servers" ],
        "summary" : "Updates a server and returns it",
        "operationId" : "updateServer",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server you want to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the server properties to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerUpdateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The updated server\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerReadDto"
                }
              }
            },
            "links" : {
              "GetServerById" : {
                "operationId" : "getServer",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `serverId` parameter in `GET /servers/{serverId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred.\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only update servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Server not found\n"
          },
          "409" : {
            "description" : "Conflict:\n- Server with provided name already exists\n"
          }
        }
      }
    },
    "/servers/{serverId}/subscribers" : {
      "get" : {
        "tags" : [ "subscribers" ],
        "summary" : "Gets subscribers of a server",
        "operationId" : "getSubscribers",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server from which you want to get the subscribers",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The collection of the server subscribers\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SubscriberReadDto"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get subscribers of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found\n- Server not found\n"
          }
        }
      },
      "post" : {
        "tags" : [ "subscribers" ],
        "summary" : "Creates a subscriber in a server and returns it",
        "operationId" : "createSubscriber",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server in which you want to create a subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the id of the related user and a boolean for the server administration role",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberCreateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created:\n- The created subscriber\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberReadDto"
                }
              }
            },
            "links" : {
              "GetSubscriberById" : {
                "operationId" : "getSubscriber",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `subscriberId` parameter in `GET /subscribers/{subscriberId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "404" : {
            "description" : "Not found:\n- server not found\n"
          },
          "409" : {
            "description" : "Conflict:\n- Subscriber with provided userId already exists\n"
          }
        }
      }
    },
    "/subscribers/{subscriberId}" : {
      "get" : {
        "tags" : [ "subscribers" ],
        "summary" : "Gets a subscriber by id",
        "operationId" : "getSubscriber",
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "The id of the subscriber you want to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The subscriber\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get his subscription\n- User can only get subscribers of servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found\n- Subscriber not found\n"
          }
        }
      },
      "delete" : {
        "tags" : [ "subscribers" ],
        "summary" : "Deletes a subscriber",
        "operationId" : "deleteSubscriber",
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "The id of the subscriber you want to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content: \n- Subscriber deleted\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only delete subscribers from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Subscriber not found\n"
          }
        }
      },
      "patch" : {
        "tags" : [ "subscribers" ],
        "summary" : "Updates a subscriber and returns it",
        "operationId" : "updateSubscriber",
        "parameters" : [ {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "The id of the subscriber you want to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the subscriber properties to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberUpdateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The updated subscriber\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberReadDto"
                }
              }
            },
            "links" : {
              "GetSubscriberById" : {
                "operationId" : "getSubscriber",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `subscriberId` parameter in `GET /subscribers/{subscriberId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only update subscribers from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Subscriber not found\n"
          }
        }
      }
    },
    "/servers/{serverId}/channels" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "Gets channels of a server",
        "operationId" : "getChannels",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server from which you want to get the channels",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The collection of the server channels\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChannelReadDto"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get channels of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found\n- Server not found\n"
          }
        }
      },
      "post" : {
        "tags" : [ "channels" ],
        "summary" : "Creates a channel in a server and returns it",
        "operationId" : "createChannel",
        "parameters" : [ {
          "name" : "serverId",
          "in" : "path",
          "description" : "The id of the server in which you want to create a channel",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the name of the channel",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelCreateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created:\n- The created channel\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelReadDto"
                }
              }
            },
            "links" : {
              "GetChannelById" : {
                "operationId" : "getChannel",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `channelId` parameter in `GET /channels/{channelId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only create channels on servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- server not found\n"
          },
          "409" : {
            "description" : "Conflict:\n- Channel with provided name already exists\n"
          }
        }
      }
    },
    "/channels/{channelId}" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "Gets a channel by id",
        "operationId" : "getChannel",
        "parameters" : [ {
          "name" : "channelId",
          "in" : "path",
          "description" : "The id of the channel you want to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The channel\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get channels of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found\n- Channel not found\n"
          }
        }
      },
      "delete" : {
        "tags" : [ "channels" ],
        "summary" : "Deletes a channel",
        "operationId" : "deleteChannel",
        "parameters" : [ {
          "name" : "channelId",
          "in" : "path",
          "description" : "The id of the channel you want to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content: \n- Channel deleted\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only delete channels from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Channel not found\n"
          }
        }
      },
      "patch" : {
        "tags" : [ "channels" ],
        "summary" : "Updates a channel and returns it",
        "operationId" : "updateChannel",
        "parameters" : [ {
          "name" : "channelId",
          "in" : "path",
          "description" : "The id of the channel you want to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the channel properties to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChannelUpdateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The updated channel\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelReadDto"
                }
              }
            },
            "links" : {
              "GetChannelById" : {
                "operationId" : "getChannel",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `channelId` parameter in `GET /channels/{channelId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only update channels from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Channel not found\n"
          },
          "409" : {
            "description" : "Conflict:\n- Channel with provided name already exists\n"
          }
        }
      }
    },
    "/channels/{channelId}/messages" : {
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Gets messages of a channel",
        "operationId" : "getMessages",
        "parameters" : [ {
          "name" : "channelId",
          "in" : "path",
          "description" : "The id of the channel from which you want to get the messages",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The collection of the channel messages\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MessageReadDto"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get messages from channels of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found\n- Channel not found\n"
          }
        }
      },
      "post" : {
        "tags" : [ "messages" ],
        "summary" : "Creates a message in a channel and returns it",
        "operationId" : "createMessage",
        "parameters" : [ {
          "name" : "channelId",
          "in" : "path",
          "description" : "The id of the channel in which you want to create a message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the content of the message",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessageCreateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created:\n- The created message\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageReadDto"
                }
              }
            },
            "links" : {
              "GetMessageById" : {
                "operationId" : "getMessage",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `messageId` parameter in `GET /messages/{messageId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only create messages on channels of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found:\n- Channel not found\n"
          }
        }
      }
    },
    "/messages/{messageId}" : {
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Gets a message by id",
        "operationId" : "getMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The id of the message you want to get",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success:\n- The message\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n- User not authenticated\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only get messages of its subscribed servers\n"
          },
          "404" : {
            "description" : "Not found\n- Message not found\n"
          }
        }
      },
      "delete" : {
        "tags" : [ "messages" ],
        "summary" : "Deletes a message",
        "operationId" : "deleteMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The id of the message you want to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content: \n- Message deleted\n"
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only delete messages from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Message not found\n"
          }
        }
      },
      "patch" : {
        "tags" : [ "messages" ],
        "summary" : "Updates a message and returns it",
        "operationId" : "updateMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The id of the message you want to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON object that contains the message properties to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessageUpdateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The updated message\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageReadDto"
                }
              }
            },
            "links" : {
              "GetMessageById" : {
                "operationId" : "getMessage",
                "parameters" : {
                  "serverId" : "$response.body#/id"
                },
                "description" : "The `id` value returned in the response can be used as\nthe `messageId` parameter in `GET /messages/{messageId}`\n"
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- One or more validation errors occurred\n"
          },
          "401" : {
            "description" : "Unauthorized\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User can only update messages from servers whose he is an administrator\n"
          },
          "404" : {
            "description" : "Not found:\n- Message not found\n"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "UserLoginDto" : {
        "required" : [ "password", "userName" ],
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-pseudo"
          },
          "password" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "Password1234."
          }
        }
      },
      "AccessTokenDto" : {
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6ImFlNTcxOGJkLWY5NzktNDQ1Ni04MmRlLTBjNzgzMzk4NzYzNCIsImp0aSI6IjBjZjc3NGYwLTUxYWQtNDM4Yi1hNTZlLTI1N2VlZGRhMjQ0MCIsIm5iZiI6MTY0MTEzNzMxMCwiZXhwIjoxNjQxMTU4OTEwLCJpYXQiOjE2NDExMzczMTB9.q1VaAodjovu79AyBNbrSxu4yZ4vOlDZQF2IyDvcsbJM\n"
          }
        }
      },
      "UserCreateDto" : {
        "required" : [ "password", "userName" ],
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-pseudo"
          },
          "password" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "Password1234."
          }
        }
      },
      "UserReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/api/users/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "userName" : {
            "type" : "string",
            "example" : "my-pseudo"
          },
          "servers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServerReadDto"
            }
          }
        }
      },
      "ServerCreateDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-server"
          }
        }
      },
      "ServerReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/api/servers/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "name" : {
            "type" : "string",
            "example" : "my-server"
          }
        }
      },
      "ServerUpdateDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-updated-channel-name"
          }
        }
      },
      "SubscriberCreateDto" : {
        "required" : [ "isAdmin", "userId" ],
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "isAdmin" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "SubscriberReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/api/subscribers/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "userId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "serverId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "isAdmin" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "SubscriberUpdateDto" : {
        "required" : [ "isAdmin" ],
        "type" : "object",
        "properties" : {
          "isAdmin" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "ChannelCreateDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-channel"
          }
        }
      },
      "ChannelReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/api/channels/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "serverId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "name" : {
            "type" : "string",
            "example" : "my-channel"
          }
        }
      },
      "ChannelUpdateDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-channel"
          }
        }
      },
      "MessageCreateDto" : {
        "required" : [ "content" ],
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-content"
          }
        }
      },
      "MessageReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/api/messages/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "userId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "channelId" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "content" : {
            "type" : "string",
            "example" : "my-content"
          },
          "creationDate" : {
            "type" : "string",
            "example" : "2021-12-12T17:47:00+0200"
          },
          "updateDate" : {
            "type" : "string",
            "example" : "2021-12-12T17:47:00+0200"
          }
        }
      },
      "MessageUpdateDto" : {
        "required" : [ "content" ],
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-new-content"
          }
        }
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "http",
        "description" : "JWT Authorization header using the Bearer scheme. Example: \\\"Authorization: Bearer {token}\\\"\",\n",
        "scheme" : "bearer"
      }
    }
  }
}